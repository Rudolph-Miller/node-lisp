// Generated by CoffeeScript 1.7.1
(function() {
  var SBCL, fs, path, spawn;

  spawn = require('child_process').spawn;

  fs = require('fs');

  path = require('path');

  SBCL = (function() {
    function SBCL(fpath) {
      var basePath, cmd, exePath, lispPath;
      basePath = path.join(path.dirname(fpath), path.basename(fpath, '.lisp'));
      lispPath = basePath + '.lisp';
      exePath = basePath + '.exe';
      if (fs.existsSync(exePath)) {
        cmd = spawn(exePath);
        cmd.stdin.setEncoding('utf-8');
        cmd.stdout.setEncoding('utf-8');
        this.stdin = cmd.stdin;
        this.stdout = cmd.stdout;
      } else {
        cmd = spawn('sbcl', ['--script', lispPath]);
        cmd.stdin.setEncoding('utf-8');
        cmd.stdout.setEncoding('utf-8');
        this.stdin = cmd.stdin;
        this.stdout = cmd.stdout;
      }
      cmd.stderr.setEncoding('utf-8');
      cmd.stderr.on('data', function(data) {
        return console.log(data);
      });
    }

    SBCL.prototype.write = function(str) {
      var data, err;
      try {
        data = JSON.stringify(str);
        this.stdin.write(data);
        return this.stdin.end();
      } catch (_error) {
        err = _error;
        return console.log(err);
      }
    };

    SBCL.prototype.use = function(fn) {
      var stdout;
      stdout = '';
      this.stdout.on('data', function(data) {
        return stdout += data;
      });
      return this.stdout.on('end', function() {
        var data;
        data = stdout.replace(/NIL/g, '');
        try {
          return fn(JSON.parse(data));
        } catch (_error) {
          return fn(data);
        }
      });
    };

    return SBCL;

  })();

  exports.SBCL = SBCL;

}).call(this);
